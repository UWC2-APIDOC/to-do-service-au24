{
	"info": {
		"_postman_id": "3bc10d11-d39b-448d-b372-da1839320c3e",
		"name": "To-Do mock service tests",
		"description": "Thses test requires this environment variable:\n\n- **`base_url`**: the base URL of the test server. For local testing with the json-server, this is **`http:/localhost:3000`**.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6224726"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "users: CREATE",
					"item": [
						{
							"name": "Add a new user",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"last_name\": \"Jones\",\r\n    \"first_name\": \"Jenny\",\r\n    \"email\": \"jen.jones@example.com\"\r\n}"
								},
								"url": {
									"raw": "{{base_url}}/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users: READ",
					"item": [
						{
							"name": "Get users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "Get user by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by name",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users?last_name=Martinez&first_name=Marty",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "last_name",
											"value": "Martinez"
										},
										{
											"key": "first_name",
											"value": "Marty"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users: UPDATE",
					"item": [
						{
							"name": "Update user 2",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"last_name\": \"Jones\",\r\n    \"first_name\": \"Jillio\",\r\n    \"email\": \"j.jones@example.com\"\r\n}"
								},
								"url": {
									"raw": "{{base_url}}/users/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch user 2",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\r\n        \"email\": \"jlo.jones@example.com\"\r\n    }\r\n    \r\n"
								},
								"url": {
									"raw": "{{base_url}}/users/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users: DELETE",
					"item": [
						{
							"name": "Delete user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"5"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "tasks",
			"item": [
				{
					"name": "tasks: CREATE",
					"item": [
						{
							"name": "Add new to-do tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"task_title\": \"Get new tires\",\n    \"task_description\": \"Get new tires for Hoppity\",\n    \"task_due_date\": \"2024-03-11T14:00\",\n    \"task_warning\": \"-60\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tasks",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tasks"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "tasks: READ",
					"item": [
						{
							"name": "Get tasks",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tasks",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get tasks by user_id",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/tasks?user_id=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tasks"
									],
									"query": [
										{
											"key": "user_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1",
			"disabled": true
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/",
			"disabled": true
		}
	]
}